{"ast":null,"code":"var _jsxFileName = \"D:\\\\Bootcamp\\\\Code_VSC\\\\React\\\\Day41\\\\react-kepo\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home/Home';\nimport Services from './pages/Services/Services';\nimport Product from './pages/Product/Product';\nimport ContactUs from './pages/ContactUs/ContactUs';\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchDataHotel = (url, inputMethod) => {\n      try {\n        const option = {\n          method: inputMethod,\n          mode: \"cors\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Credentials\": true\n          }\n        };\n        fetch(\"http://localhost:8887/web/hotel\" + url, option).then(response => response.json()).then(async json => {\n          console.log(\"Json : \", json); // const listUser = await json.map(hotel => {\n          //     return {\n          //         id: hotel.id,\n          //         hotelName: hotel.name,\n          //         kota: hotel.kota,\n          //         jumlahKamar: hotel.kamar,\n          //         terpakai: hotel.address,\n          //         tersedia: hotel.tersedia\n          //     }\n          // })\n          // console.log(\"Data Hotel : \", listUser)\n\n          this.props.HotelFetchData(json);\n        });\n      } catch (error) {\n        if (error instanceof fetch.AbortError) {\n          console.log(\"Request Hotel Data Was Aborted\");\n        }\n      }\n    };\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.fetchDataHotel(\"/list\", \"get\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/home\",\n      component: Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/services\",\n      component: Services,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/product\",\n      component: Product,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/contact-us\",\n      component: ContactUs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    HotelFetchData: hotel => dispatch({\n      type: \"FETCH_DATA_HOTEL\",\n      data: hotel\n    })\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);","map":{"version":3,"sources":["D:/Bootcamp/Code_VSC/React/Day41/react-kepo/src/App.js"],"names":["React","Component","Navbar","BrowserRouter","Router","Switch","Route","Home","Services","Product","ContactUs","connect","App","constructor","props","fetchDataHotel","url","inputMethod","option","method","mode","headers","fetch","then","response","json","console","log","HotelFetchData","error","AbortError","state","componentDidMount","render","mapDispatchToProps","dispatch","hotel","type","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from './pages/Home/Home';\r\nimport Services from './pages/Services/Services';\r\nimport Product from './pages/Product/Product';\r\nimport ContactUs from './pages/ContactUs/ContactUs';\r\nimport { connect } from \"react-redux\"\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={}\r\n  }\r\n\r\n  fetchDataHotel = (url, inputMethod) => {\r\n    try{\r\n        const option = {\r\n            method: inputMethod,\r\n            mode: \"cors\",\r\n            headers:{ \r\n                \"Content-Type\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\" : \"*\", \r\n                \"Access-Control-Allow-Credentials\" : true \r\n            }\r\n        }\r\n\r\n        fetch(\"http://localhost:8887/web/hotel\" + url, option)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                console.log(\"Json : \", json);\r\n                \r\n                // const listUser = await json.map(hotel => {\r\n                //     return {\r\n                //         id: hotel.id,\r\n                //         hotelName: hotel.name,\r\n                //         kota: hotel.kota,\r\n                //         jumlahKamar: hotel.kamar,\r\n                //         terpakai: hotel.address,\r\n                //         tersedia: hotel.tersedia\r\n                //     }\r\n                // })\r\n                // console.log(\"Data Hotel : \", listUser)\r\n                this.props.HotelFetchData(json);\r\n            })\r\n    } catch (error) {\r\n        if (error instanceof fetch.AbortError) {\r\n            console.log(\"Request Hotel Data Was Aborted\")\r\n        }\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.fetchDataHotel(\"/list\", \"get\")\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route path='/home' component={Home} />\r\n          <Route path='/services' component={Services} />\r\n          <Route path='/product' component={Product} />\r\n          <Route path='/contact-us' component={ContactUs} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return{\r\n    HotelFetchData: (hotel) => dispatch({\r\n        type: \"FETCH_DATA_HOTEL\",\r\n        data: hotel\r\n    })\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}